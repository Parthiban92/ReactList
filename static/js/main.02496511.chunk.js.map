{"version":3,"sources":["modules/home/ListActions.js","modules/home/ListReducer.js","store/Store.js","modules/home/Listing.jsx","modules/home/Editor.jsx","modules/commons/ViewsContainer.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["LIST_ACTION_TYPES","LIST_ACTION","LIST_ACTION_IN_PROGRESS","LIST_ACTION_SUCCESS","LIST_ACTION_ERROR","GET_POST_BY_ID","UPDATE_POST","listAction","param","dispatch","type","payload","listingInProgressAction","fetch","then","response","json","posts","listingSuccessAction","catch","error","listingErrorAction","edit","push","list","getPostById","getPostByIdAction","updatePost","updatePostAction","combineReducers","values","state","action","Object","assign","listingInProgress","updated","post","find","id","undefined","selectedPost","map","postToUpdate","indexToUpdate","indexOf","title","body","splice","history","createBrowserHistory","rootReducer","router","connectRouter","middlewares","routerMiddleware","thunk","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","styles","header","display","width","padding","flexDirection","alignItems","container","height","centralize","margin","paddingTop","paddingLeft","row","borderBottom","column","flex","connect","bindActionCreators","listActions","useEffect","style","icon","faSpinner","spin","size","key","onClick","console","log","props","match","params","useState","setTitle","setBody","parseInt","className","value","onChange","e","target","ViewsContainer","exact","path","component","List","Editor","render","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.02496511.chunk.js","sourcesContent":["import { push } from \"connected-react-router\";\n\nexport const LIST_ACTION_TYPES = {\n  LIST_ACTION: \"LIST_ACTION\",\n  LIST_ACTION_IN_PROGRESS: \"LIST_ACTION_IN_PROGRESS\",\n  LIST_ACTION_SUCCESS: \"LIST_ACTION_SUCCESS\",\n  LIST_ACTION_ERROR: \"LIST_ACTION_ERROR\",\n  GET_POST_BY_ID: \"GET_POST_BY_ID\",\n  UPDATE_POST: \"UPDATE_POST\"\n};\n\nconst listingInProgressAction = param => ({\n  type: LIST_ACTION_TYPES.LIST_ACTION_IN_PROGRESS,\n  payload: param\n});\n\nconst listingSuccessAction = param => ({\n  type: LIST_ACTION_TYPES.LIST_ACTION_SUCCESS,\n  payload: param\n});\n\nconst listingErrorAction = param => ({\n  type: LIST_ACTION_TYPES.LIST_ACTION_ERROR,\n  payload: param\n});\n\nconst getPostByIdAction = param => ({\n  type: LIST_ACTION_TYPES.GET_POST_BY_ID,\n  payload: param\n});\n\nconst updatePostAction = param => ({\n  type: LIST_ACTION_TYPES.UPDATE_POST,\n  payload: param\n});\n\nexport const listAction = param => dispatch => {\n  dispatch(listingInProgressAction(param));\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(response => response.json())\n    .then(posts => {\n      dispatch(listingSuccessAction(posts));\n    })\n    .catch((error) => {\n      dispatch(listingErrorAction(error));\n    });\n};\n\nexport const edit = param => dispatch => {\n  dispatch(push(\"/edit/\" + param));\n};\n\nexport const list = param => dispatch => {\n  dispatch(push(\"/ReactList\"));\n};\n\nexport const getPostById = param => dispatch => {\n  dispatch(getPostByIdAction(param));\n}\n\nexport const updatePost = param => dispatch => {\n  dispatch(updatePostAction(param));\n}\n","import { combineReducers } from \"redux\";\nimport { LIST_ACTION_TYPES } from \"./ListActions\";\n\nconst values = (state = [], action) => {\n  switch (action.type) {\n    case LIST_ACTION_TYPES.LIST_ACTION:\n      return [...state, action.payload];\n    case LIST_ACTION_TYPES.LIST_ACTION_IN_PROGRESS:\n      return Object.assign({}, state, {\n        listingInProgress: true\n      })\n    case LIST_ACTION_TYPES.LIST_ACTION_SUCCESS:\n      return Object.assign({}, state, {\n        listingInProgress: false,\n        updated: false,\n        posts: action.payload\n      })\n    case LIST_ACTION_TYPES.LIST_ACTION_ERROR:\n      return Object.assign({}, state, {\n        listingInProgress: false,\n        error: action.payload\n      })\n    case LIST_ACTION_TYPES.GET_POST_BY_ID:\n      const post = state.posts ? state.posts.find(post => post.id === action.payload) : undefined\n      return Object.assign({}, state, {\n        selectedPost: post,\n        updated: false\n      })\n    case LIST_ACTION_TYPES.UPDATE_POST:\n      const id = action.payload.id;\n      const posts = state.posts.map(post => Object.assign({}, post));\n      const postToUpdate = posts ? posts.find(post => post.id === id) : undefined\n      const indexToUpdate = posts.indexOf(postToUpdate);\n      if (postToUpdate) {\n        postToUpdate.title = action.payload.title;\n        postToUpdate.body = action.payload.body\n        posts.splice(indexToUpdate, 1, postToUpdate)\n        return Object.assign({}, state, {\n          posts: posts,\n          updated: true\n        });\n      } else {\n        return Object.assign({}, state, {\n        updated: false\n       });\n      }\n    \n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  values\n});\n","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { routerMiddleware, connectRouter } from 'connected-react-router'\nimport { createBrowserHistory } from \"history\";\nimport list from \"../modules/home/ListReducer\";\n\nexport const history = createBrowserHistory();\n\nconst rootReducer = combineReducers({\n  list,\n  router: connectRouter(history)\n})\n\nconst middlewares = [routerMiddleware(history), thunk];\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // eslint-disable-line\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancer(applyMiddleware(...middlewares))\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, compose } from \"redux\";\nimport * as listActions from \"./ListActions\";\nimport { useEffect } from 'react';\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\n\nconst styles = {\n  header: {\n    display: \"flex\",\n    width: \"100%\",\n    padding: \"20px\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  container: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  centralize: {\n    margin: \"auto\",\n    paddingTop: \"10%\",\n    paddingLeft: \"45%\",\n    width: \"50%\"\n  },\n  row: {\n    display: \"flex\",\n    borderBottom: \"1px solid\",\n    padding: \"5px\"\n  },\n  column: {\n    flex: 1\n  }\n};\n\nconst List = ({ listAction, edit, listingInProgress, posts }) => {\n  useEffect(() => {\n    if (!posts) {\n      listAction();\n    }\n  }, []);\n  return (\n    <div style={styles.container}>\n      <div style={styles.header}>Posts</div>\n      {listingInProgress ? <div style={styles.centralize}><FontAwesomeIcon icon={faSpinner} spin size=\"6x\" /></div> : \"\"}\n      {posts ? posts.map(post => {\n        return <div style={styles.row} key={post.id}>\n          <div style={styles.column}>{post.title}</div>\n          <div style={styles.column}>{post.body}</div>\n          <div style={styles.column}><button onClick={() => edit(post.id)}>Edit</button></div>\n        </div>\n      }) : \"\"}\n    </div>\n  )\n};\n\nList.propTypes = {\n  listingInProgress: PropTypes.bool,\n  posts: PropTypes.arrayOf(PropTypes.object),\n  listAction: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return ({\n    posts: state.list.values.posts,\n    listingInProgress: state.list.values.listingInProgress\n  });\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ ...listActions }, dispatch);\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(List);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, compose } from \"redux\";\nimport * as listActions from \"./ListActions\";\nimport { useState, useEffect } from 'react';\n\nconst Editor = (props) => {\n  console.log(props)\n  console.log(props.match.params.id)\n\n  const [title, setTitle] = useState(props.post ? props.post.title : '');\n  const [body, setBody] = useState(props.post ? props.post.body : '');\n\n  useEffect(() => {\n    props.getPostById(parseInt(props.match.params.id))\n    if (props.post) {\n      setTitle(props.post.title)\n      setBody(props.post.body)\n    }\n    if (props.updated) {\n      props.list();\n    }\n  }, [props]);\n\n  if (!props.post) {\n    return ''\n  };\n\n  return (props.post ? <div className=\"container\">\n       <div className=\"label_css\"><label >Title</label></div>\n            <div> <textarea value={title} onChange={(e) => setTitle(e.target.value)} /></div>\n       <div  className=\"label_css\" ><label >Body</label></div>\n          <div> <textarea value={body} onChange={(e) => setBody(e.target.value)} /></div>\n        <div className=\"center\"> \n         <button  onClick={() => { props.updatePost({ id: props.post.id, title: title, body: body }) }}>Save</button>\n        </div>\n  </div > : \"\")\n};\n\nEditor.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  updatePost: PropTypes.func.isRequired,\n  list: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  console.log(state)\n  return ({\n    post: state.list.values.selectedPost,\n    updated: state.list.values.updated\n  });\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ ...listActions }, dispatch);\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(Editor);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport List from \"../home/Listing\";\nimport Editor from \"../home/Editor\";\n\nconst ViewsContainer = () => (\n  <Switch>\n    <Route exact path=\"/ReactList\" component={List} />\n    <Route path=\"/edit/:id\" component={Editor} />\n    <Route render={() => <div>DEFAULT</div>} />\n  </Switch>\n);\n\nexport default ViewsContainer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { store, history } from './store/Store';\nimport ViewsContainer from './modules/commons/ViewsContainer';\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n       <ViewsContainer />\n    </ConnectedRouter>\n  </Provider>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}